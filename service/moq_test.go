// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/naoyakurokawa/book_line_api/entity"
	"github.com/naoyakurokawa/book_line_api/store"
	"sync"
)

// Ensure, that BookListerMock does implement BookLister.
// If this is not the case, regenerate this file with moq.
var _ BookLister = &BookListerMock{}

// BookListerMock is a mock implementation of BookLister.
//
//	func TestSomethingThatUsesBookLister(t *testing.T) {
//
//		// make and configure a mocked BookLister
//		mockedBookLister := &BookListerMock{
//			ListBooksFunc: func(ctx context.Context, db store.Queryer) (entity.Books, error) {
//				panic("mock out the ListBooks method")
//			},
//		}
//
//		// use mockedBookLister in code that requires BookLister
//		// and then make assertions.
//
//	}
type BookListerMock struct {
	// ListBooksFunc mocks the ListBooks method.
	ListBooksFunc func(ctx context.Context, db store.Queryer) (entity.Books, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListBooks holds details about calls to the ListBooks method.
		ListBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Queryer
		}
	}
	lockListBooks sync.RWMutex
}

// ListBooks calls ListBooksFunc.
func (mock *BookListerMock) ListBooks(ctx context.Context, db store.Queryer) (entity.Books, error) {
	if mock.ListBooksFunc == nil {
		panic("BookListerMock.ListBooksFunc: method is nil but BookLister.ListBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  store.Queryer
	}{
		Ctx: ctx,
		Db:  db,
	}
	mock.lockListBooks.Lock()
	mock.calls.ListBooks = append(mock.calls.ListBooks, callInfo)
	mock.lockListBooks.Unlock()
	return mock.ListBooksFunc(ctx, db)
}

// ListBooksCalls gets all the calls that were made to ListBooks.
// Check the length with:
//
//	len(mockedBookLister.ListBooksCalls())
func (mock *BookListerMock) ListBooksCalls() []struct {
	Ctx context.Context
	Db  store.Queryer
} {
	var calls []struct {
		Ctx context.Context
		Db  store.Queryer
	}
	mock.lockListBooks.RLock()
	calls = mock.calls.ListBooks
	mock.lockListBooks.RUnlock()
	return calls
}

// Ensure, that UserRegisterMock does implement UserRegister.
// If this is not the case, regenerate this file with moq.
var _ UserRegister = &UserRegisterMock{}

// UserRegisterMock is a mock implementation of UserRegister.
//
//	func TestSomethingThatUsesUserRegister(t *testing.T) {
//
//		// make and configure a mocked UserRegister
//		mockedUserRegister := &UserRegisterMock{
//			RegisterUserFunc: func(ctx context.Context, db store.Execer, u *entity.User) error {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedUserRegister in code that requires UserRegister
//		// and then make assertions.
//
//	}
type UserRegisterMock struct {
	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, db store.Execer, u *entity.User) error

	// calls tracks calls to the methods.
	calls struct {
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.Execer
			// U is the u argument value.
			U *entity.User
		}
	}
	lockRegisterUser sync.RWMutex
}

// RegisterUser calls RegisterUserFunc.
func (mock *UserRegisterMock) RegisterUser(ctx context.Context, db store.Execer, u *entity.User) error {
	if mock.RegisterUserFunc == nil {
		panic("UserRegisterMock.RegisterUserFunc: method is nil but UserRegister.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  store.Execer
		U   *entity.User
	}{
		Ctx: ctx,
		Db:  db,
		U:   u,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, db, u)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedUserRegister.RegisterUserCalls())
func (mock *UserRegisterMock) RegisterUserCalls() []struct {
	Ctx context.Context
	Db  store.Execer
	U   *entity.User
} {
	var calls []struct {
		Ctx context.Context
		Db  store.Execer
		U   *entity.User
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}
